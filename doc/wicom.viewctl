The creation of a new module wviewctl was motivated due to the
inexistence of interface between the plantmgr, shapemgr and
the wview in use.

Shapes are added using the shapemgr, these shapes can be
associated to plants and to layers. Plants are managed through
the plantmgr and each plant has an unique ID. Layers cannot
be dynamically added or removed, they belong to a static list.

wview receives attention whenever a new frame must be draw
then it needs the list of shapes or plants to draw, but these
two data types must be processed and linked (if a map is
not visible, its shapes shouldn't be drawn). This aditional
processing motivated the creation of wviewctl.

The user might also interact with the window of wview and
thats when the input callbacks are called (for mouse and
keyboard). So where should these callbacks be located in
the code? the code that needs to process user input from
the window is located in different parts of wicom, so I
tought this wviewctl interface can also fix that by providing
a way of multiplexing input callbacks between whoever
registered in wviewctl for the input callback.

So the client code can ask wviewctl to register input
callbacks and whenever wviewctl is called due to user input
it will call all registered callbacks of the client code.

wview should not know anything about shapes, layers or
plants, it just draws primitives (lines, polygons, ...).
Although, in the beginning shapes from the shapemgr should
be very similar to the primitive shapes provided by wview
in the future wview might have custom shapes made of various
wview shapes (eg. label = text + background rectangle).

If there is any shape change, wviewctl should detect that
and request a wview redraw.

WVIEWCTL INTERNALS

This module might need to use multithreading and synchronization
objects since all calls to the module are asynchronous in a
way that they return always. They should do the action and return
there is no loop function for wviewctl as there is in wview.
This can raise issues with the multithreading support of wview
interfaces. For that reason one thing should be assured, all
calls made to wview interface are made using the same thread.

When this module initializes, it creates a working thread.
This thread will communicate with the wview interface, initialize,
create the window, etc.

The client then can call wviewctl functions without disturbing
wview processing (like register callbacks to be included in
the multiplexing, etc.).

It is required then that the shapemgr and the plantmgr support
multithreading, so they should use synchronization objects
in the list of shapes and list of plants. The same applies to
wviewctl in the case of callback lists.

Worker Thread

The worker thread is the thread that communicates with the
wview module it also processes requests from client code.

Requests are transparent to client code, in the point of
view of the client, its just calling a function from wviewctl,
that function internally will however play with the request
queue.

Not all functions from wviewctl available to the client
need to use the request queue, only those that require
contact with wview module.


ISSUE #1: how the client code above wviewctl knows when the user
closes the window? there should exist a special callback passed
in wviewctl initialization structure which should be called
whenever this happens.

ISSUE #2: how the client may send special requests to wview
using wviewctl or contacting wview directly?

 No code should contact wview directly because wviewctl was
 coded in a way that only a single thread accesses wview module.
 
 Taking this in account at first sight the solution is to
 have a request queue in wviewctl which will process them
 using the thread that contacts with wview (working_thread).
 Then, the working_thread must not block (should not call wview
 process routine synchrously).

 With the asynchronous access to wview, how will wviewctl
 detect when the window was closed??
  S: glutCloseFunc allows to register a callback function that
     is called whenever the window is closed.

 Inside the working thread of wviewctl it should call wview
 process routine asynchrously and check for a flag that
 gives information of window status (closed or not). If the
 window was closed, the close routine is called and the
 flag is set. Inside the working thread then, procedures
 should be done as it was done when the window was closed.

 A new field was added to create window structure, in wview,
 this is closewnd_cb which is a callback called whenever the
 window close button is clicked. wviewctl should set this
 field to an internal routine which will set window_closed
 flag active inside wviewctl. That will break the main loop
 of working thread.

