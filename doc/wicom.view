
Wicom wview is the abstraction of a viewport window structure.
This includes functions to:
- initialize a view window
- create primitive objects (lines, points, circles, polygons)
- create interactive objects (buttons, tooltips,...)
- allow hooking for mouse and keyboard.

This wview API should be as simple as possible, the complex
objects or shapes should be created using code from above.

The first and only wview available in the first version
should be viewogl which relates to OpenGL implementation.

Each wview available should have a standard list of functions
that will be called by wview. At first sight it should not
be needed to change wview at runtime and wicom should be
compiled using only one of wview interfaces available (for
instance, viewogl if its going to be compiled for Windows
or Linux).

The wview should be able to create one window where the
output will be draw according to calls made to wview.

There should be two ways of giving CPU to wview one synchronous
and asynchronous. This should be implemented using the function
wview_process function which should have one argument to
distinguish from those two modes.

It is also necessary for the wview to provide client ways
of moving the camera around the world. The way it should do this
is by translating all the perspective objects by a vector
before drawing them.

Basic functions that should be implemented on each wview are:

wview_initialize()
wview_cleanup()

wview_create_window()
  Creates the window where the graphical output will be draw.
  Only one window is used by wicom. In this function it should
  be given also some callbacks for the propose of requesting
  to draw a single frame or user interaction with mouse or
  keyboard.

  List of callbacks that must be provided:
   - draw_frame_cb, called whenever a frame must be draw, it
       is specified whenever its in ortho mode or perspective
	   mode. The client code then should call 
   - mouse_input_cb
   - keyboard_input_cb
   - closewnd_cb called whenever the window is closed by the
     user, this is not mandatory.

  OpenGL: use glutCreateWindow, call 
  WinGDI: CreateClassEx, CreateWindowEx ...

wview_destroy_window()
  Calling this function should destroy the view window
  created using wview_create_window, since there's only one,
  there's no need to identify the windows.

wview_draw_shape()
  The client should draw shapes whenever wview calls the
  callback routine to draw a single frame (this routine is an
  argument of wview_create_window).
  No shape will be draw otherwise, that means this function will
  return error if its called outside draw single frame context.

  This function requires basic information about the shape,
  which includes: type, vertexes locations, color?, etc.

  All vertexes must use 3 dimentional coordinate system.

  The view space should support two types of displaying the
  graphics: orthogonal and perspective. Like in OpenGL the
  orthogonal mode is for drawing 2D shapes, their size
  doesn't change whenever you move around objects (eg. they
  don't have perspective). In perspective mode, objects
  have depth..

  Whenever the interface calls the routine to draw a single
  frame, information about the mode should be passed, or
  better, two callback functions should be defined, one
  for orthogonal draw and another for perspective draw.
  Whenever a frame is to be draw, both of the callbacks are
  called once.

  A shape might have also an identifier associated, this
  will be used for example whenever the user requests the
  shapes where the mouse is at.

  OpenGL: glBegin, glEnd, glVertex, glColor,...
  WinGDI: during the WM_PAINT, call GDI functions.

wview_redraw()
  Frames can be drawn because of two reasons, internal
  to the wview and implicity from the client code. This
  function allows the client code to inform wview that
  it should redraw the viewport because something changed,
  its a way of requesting a new frame to be draw.

  For example, if client code has animation, it must call
  this function for every new frame to be draw.

wview_process()
  Theres a need to pass wview interface some of the CPU
  time so it does internal processing. This is done using
  this function where it supports two behaviours:
  synchronous and asynchronous.

  In synchronous behaviour, the function only returns when
  the user closes the wview window. Client should then do
  the cleanup, it shouldn't be assumed that any wview
  cleanup was done.

  In asynchronous behaviour, the function only does some
  processing and then returns this way allowing the client
  to use the thread to other processing. In this behaviour
  the client should call this function periodically
  (the frequency depends on the frequency of changed
  objects in the window or if the window requires redraw).

wview_set()
  When initializing wview its possible to pass some
  configuration parameters to the wview_init_t structure
  however, there are options that can be dynamically
  changed during the wview usage. This function allows
  client code to change wview parameters while the
  window is still running.

  Parameter list is described next:

  WVOPTION_TRANSLATE_VECTOR
  Before the objects on the perspective mode are drawn
  its possible to apply a translation vector to all
  the objects. This sets that translation vector.

  WVOPTION_ROTATE_VECTOR
  Before the objects on the perspective mode are drawn
  its possible to apply a rotation vector to all the
  objects. This sets that rotation vector. It uses 4
  coordinates. TODO: describe this better...

  WVOPTION_TR_ORDER
  Before the objects on the perspective mode are drawn
  its possible to apply a rotation and/or a translation
  to all the objects. This allows the client to select
  the order of the transformation (first translate then
  rotate or first rotate then translate).

